import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.model_selection import train_test_split

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
url = "https://raw.githubusercontent.com/AlexxxAI/ML_Project_1/refs/heads/master/Hotel_Reservations.csv"
df = pd.read_csv(url)
df.drop(columns=['Booking_ID'], inplace=True)

# –ö–æ–¥–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
label_encoders = {}
categorical_features = ['type_of_meal_plan', 'room_type_reserved', 'market_segment_type']
for col in categorical_features:
    le = LabelEncoder()
    df[col] = le.fit_transform(df[col])
    label_encoders[col] = le

# –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏ —Ü–µ–ª–µ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
X = df.drop('booking_status', axis=1)
y = (df['booking_status'] == 'Canceled').astype(int)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ 0 –∏ 1

# –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –æ–±—É—á–∞—é—â—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫–∏
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

# –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
scaler = StandardScaler()
numerical_columns = X_train.select_dtypes(include=['int64', 'float64']).columns
X_train[numerical_columns] = scaler.fit_transform(X_train[numerical_columns])
X_test[numerical_columns] = scaler.transform(X_test[numerical_columns])

# –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
rf_model = RandomForestClassifier(random_state=42, class_weight='balanced', max_depth=10,
                                  min_samples_leaf=1, n_estimators=300, max_features='sqrt')
rf_model.fit(X_train, y_train)

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit
st.title("üîÆ –ü—Ä–æ–≥–Ω–æ–∑ –æ—Ç–º–µ–Ω—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
st.sidebar.header("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏")

# –ü–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
user_input = {}
user_input['no_of_adults'] = st.sidebar.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∑—Ä–æ—Å–ª—ã—Ö", 1, 5, 2)
user_input['no_of_children'] = st.sidebar.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π", 0, 5, 0)
user_input['no_of_weekend_nights'] = st.sidebar.slider("–ù–æ—á–∏ –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ", 0, 5, 1)
user_input['no_of_week_nights'] = st.sidebar.slider("–ù–æ—á–∏ –≤ –±—É–¥–Ω–∏", 0, 10, 2)
user_input['type_of_meal_plan'] = st.sidebar.selectbox("–¢–∏–ø –ø–∏—Ç–∞–Ω–∏—è", label_encoders['type_of_meal_plan'].classes_)
user_input['required_car_parking_space'] = st.sidebar.checkbox("–ù—É–∂–Ω–∞ –ø–∞—Ä–∫–æ–≤–∫–∞?")
user_input['room_type_reserved'] = st.sidebar.selectbox("–¢–∏–ø –Ω–æ–º–µ—Ä–∞", label_encoders['room_type_reserved'].classes_)
user_input['lead_time'] = st.sidebar.slider("–î–Ω–∏ –¥–æ –∑–∞–µ–∑–¥–∞", 0, 500, 100)
user_input['arrival_year'] = st.sidebar.slider("–ì–æ–¥ –∑–∞–µ–∑–¥–∞", 2017, 2021, 2019)
user_input['arrival_month'] = st.sidebar.slider("–ú–µ—Å—è—Ü –∑–∞–µ–∑–¥–∞", 1, 12, 6)
user_input['arrival_date'] = st.sidebar.slider("–î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞", 1, 31, 15)
user_input['market_segment_type'] = st.sidebar.selectbox("–¢–∏–ø –∫–ª–∏–µ–Ω—Ç–∞", label_encoders['market_segment_type'].classes_)
user_input['repeated_guest'] = st.sidebar.checkbox("–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç?")
user_input['no_of_previous_cancellations'] = st.sidebar.slider("–ü—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—Ç–º–µ–Ω—ã", 0, 10, 0)
user_input['no_of_previous_bookings_not_canceled'] = st.sidebar.slider("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –±–µ–∑ –æ—Ç–º–µ–Ω", 0, 50, 0)
user_input['avg_price_per_room'] = st.sidebar.slider("–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –Ω–æ–º–µ—Ä–∞", 0, 500, 100)
user_input['no_of_special_requests'] = st.sidebar.slider("–°–ø–µ—Ü–∑–∞–ø—Ä–æ—Å—ã", 0, 5, 0)

# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ DataFrame
input_df = pd.DataFrame([user_input])

# –ö–æ–¥–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
for col in categorical_features:
    input_df[col] = label_encoders[col].transform(input_df[col])

# –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
input_df[numerical_columns] = scaler.transform(input_df[numerical_columns])

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Å–æ—Å—Ç–æ—è–Ω–∏—è, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
if "predict" not in st.session_state:
    st.session_state.predict = False

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
def make_prediction():
    st.session_state.predict = True

# –ö–Ω–æ–ø–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
if st.sidebar.button("üîç –°–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ", on_click=make_prediction):
    st.session_state.predict = True

# –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞
if st.session_state.predict:
    prediction = rf_model.predict(input_df)[0]
    prediction_proba = rf_model.predict_proba(input_df)[0]
    
    st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:")
    if prediction == 1:
        st.error("‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç–º–µ–Ω—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è!")
    else:
        st.success("‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    
    st.progress(int(prediction_proba[1] * 100))
    st.write(f"**–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç–º–µ–Ω—ã:** {prediction_proba[1]:.2f}")

# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
st.subheader("üìà –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
feature_importances = pd.Series(rf_model.feature_importances_, index=X.columns).sort_values(ascending=False)
fig = px.bar(feature_importances, title="Feature Importance", labels={'value': '–í–∞–∂–Ω–æ—Å—Ç—å', 'index': '–ü—Ä–∏–∑–Ω–∞–∫–∏'})
st.plotly_chart(fig)
