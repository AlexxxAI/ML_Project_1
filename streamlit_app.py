import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.ensemble import RandomForestClassifier

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="–ü—Ä–æ–≥–Ω–æ–∑ –æ—Ç–º–µ–Ω—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", layout="centered")

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("üè® –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–µ–ª—è")
st.write("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∏ –º–æ–¥–µ–ª—å –ø—Ä–µ–¥—Å–∫–∞–∂–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç–º–µ–Ω—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
url = "https://raw.githubusercontent.com/AlexxxAI/ML_Project_1/refs/heads/master/Hotel_Reservations.csv"
df = pd.read_csv(url)

df = df.drop(columns=['Booking_ID'])

# –ö–æ–¥–∏—Ä—É–µ–º —Ü–µ–ª–µ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
if 'booking_status' in df.columns:
    df['booking_status'] = df['booking_status'].map({'Canceled': 1, 'Not_Canceled': 0})

# –ö–æ–¥–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
label_encoder = LabelEncoder()
categorical_features = ['type_of_meal_plan', 'room_type_reserved', 'market_segment_type']
for col in categorical_features:
    df[col] = label_encoder.fit_transform(df[col])

# –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏ —Ü–µ–ª–µ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
X = df.drop('booking_status', axis=1)
y = df['booking_status']

# –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ–±—É—á–∞—é—â—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫–∏
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

# –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
scaler = StandardScaler()
numerical_columns = X_train.select_dtypes(include=['int64', 'float64']).columns
X_train[numerical_columns] = scaler.fit_transform(X_train[numerical_columns])
X_test[numerical_columns] = scaler.transform(X_test[numerical_columns])

# –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ Random Forest
rf_model = RandomForestClassifier(random_state=42, class_weight='balanced', max_depth=10,
                                  min_samples_leaf=1, n_estimators=300, max_features='sqrt')
rf_model.fit(X_train, y_train)

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ —Å —Ä—É—Å—Å–∫–∏–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
st.sidebar.header("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:")
feature_names = {
    "no_of_adults": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∑—Ä–æ—Å–ª—ã—Ö",
    "no_of_children": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π",
    "no_of_weekend_nights": "–ß–∏—Å–ª–æ –Ω–æ—á–µ–π (–≤—ã—Ö–æ–¥–Ω—ã–µ)",
    "no_of_week_nights": "–ß–∏—Å–ª–æ –Ω–æ—á–µ–π (–±—É–¥–Ω–∏)",
    "required_car_parking_space": "–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–∫–æ–≤–∫–∞",
    "lead_time": "–î–Ω–µ–π –¥–æ –∑–∞–µ–∑–¥–∞",
    "arrival_month": "–ú–µ—Å—è—Ü –∑–∞–µ–∑–¥–∞",
    "arrival_date": "–î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞",
    "repeated_guest": "–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≥–æ—Å—Ç—å",
    "no_of_previous_cancellations": "–ü—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—Ç–º–µ–Ω—ã",
    "no_of_previous_bookings_not_canceled": "–†–∞–Ω–µ–µ –Ω–µ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è",
    "avg_price_per_room": "–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞ –Ω–æ–º–µ—Ä",
    "no_of_special_requests": "–ß–∏—Å–ª–æ –æ—Å–æ–±—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"
}

user_input = {}
for col in X.columns:
    user_input[col] = st.sidebar.slider(feature_names.get(col, col), float(df[col].min()), float(df[col].max()), float(df[col].mean()))

input_df = pd.DataFrame([user_input])
input_scaled = scaler.transform(input_df)

# –ö–Ω–æ–ø–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
if st.sidebar.button("üîç –°–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ"):
    prediction = rf_model.predict(input_scaled)
    prediction_proba = rf_model.predict_proba(input_scaled)
    
    st.subheader("üìå –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:")
    if prediction[0] == 1:
        st.error("‚ùå –í—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç–º–µ–Ω—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è!")
    else:
        st.success("‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –Ω–µ –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    
    st.write("**–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:**")
    st.write(f"–ù–µ –æ—Ç–º–µ–Ω–µ–Ω–æ: {prediction_proba[0][0]:.2f}, –û—Ç–º–µ–Ω–µ–Ω–æ: {prediction_proba[0][1]:.2f}")

    # –ì—Ä–∞—Ñ–∏–∫ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    st.subheader("üîé –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
    feature_importances = pd.DataFrame({'–ü—Ä–∏–∑–Ω–∞–∫': X.columns, '–í–∞–∂–Ω–æ—Å—Ç—å': rf_model.feature_importances_})
    feature_importances = feature_importances.sort_values(by='–í–∞–∂–Ω–æ—Å—Ç—å', ascending=True)
    fig, ax = plt.subplots(figsize=(8, 6))
    ax.barh(feature_importances['–ü—Ä–∏–∑–Ω–∞–∫'], feature_importances['–í–∞–∂–Ω–æ—Å—Ç—å'], color='royalblue')
    ax.set_xlabel("–í–∞–∂–Ω–æ—Å—Ç—å")
    ax.set_ylabel("–ü—Ä–∏–∑–Ω–∞–∫")
    ax.set_title("–í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –≤ –º–æ–¥–µ–ª–∏ Random Forest")
    st.pyplot(fig)
