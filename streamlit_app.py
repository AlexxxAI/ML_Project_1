import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.ensemble import RandomForestClassifier

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="–ü—Ä–æ–≥–Ω–æ–∑ –æ—Ç–º–µ–Ω—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", layout="centered")

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("üè® –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–µ–ª—è")
st.write("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, –∏ –º–æ–¥–µ–ª—å –ø—Ä–µ–¥—Å–∫–∞–∂–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç–º–µ–Ω—ã.")

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
df = pd.read_csv("https://raw.githubusercontent.com/AlexxxAI/ML_Project_1/refs/heads/master/Hotel_Reservations.csv")
df.drop(columns=['Booking_ID'], inplace=True)

# –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
label_encoders = {}
for col in ['type_of_meal_plan', 'room_type_reserved', 'market_segment_type']:
    le = LabelEncoder()
    df[col] = le.fit_transform(df[col])
    label_encoders[col] = le

# –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
X = df.drop('booking_status', axis=1)
y = df['booking_status']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

# –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–ª–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
scaler = StandardScaler()
numerical_columns = X_train.select_dtypes(include=['int64', 'float64']).columns
X_train[numerical_columns] = scaler.fit_transform(X_train[numerical_columns])
X_test[numerical_columns] = scaler.transform(X_test[numerical_columns])

# –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
rf_model = RandomForestClassifier(random_state=42, class_weight='balanced', max_depth=10, 
                                  min_samples_leaf=1, n_estimators=300, max_features='sqrt')
rf_model.fit(X_train, y_train)

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
st.sidebar.header("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")

user_input = {}
feature_labels = {
    "lead_time": "–í—Ä–µ–º—è –¥–æ –∑–∞–µ–∑–¥–∞ (–¥–Ω–µ–π)",
    "no_of_adults": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∑—Ä–æ—Å–ª—ã—Ö",
    "no_of_children": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π",
    "no_of_weekend_nights": "–ù–æ—á–∏ –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ",
    "no_of_week_nights": "–ù–æ—á–∏ –≤ –±—É–¥–Ω–∏",
    "required_car_parking_space": "–ù—É–∂–Ω–∞ –ø–∞—Ä–∫–æ–≤–∫–∞ (0 - –ù–µ—Ç, 1 - –î–∞)",
    "no_of_special_requests": "–ß–∏—Å–ª–æ –æ—Å–æ–±—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
    "avg_price_per_room": "–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –Ω–æ–º–µ—Ä–∞",
}

# –í–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
for col, label in feature_labels.items():
    if col in ["no_of_adults", "no_of_children", "no_of_weekend_nights", "no_of_week_nights", "no_of_special_requests"]:
        user_input[col] = st.sidebar.number_input(label, min_value=0, max_value=int(df[col].max()), value=int(df[col].mean()))
    elif col == "required_car_parking_space":
        user_input[col] = st.sidebar.selectbox(label, [0, 1], format_func=lambda x: "–î–∞" if x == 1 else "–ù–µ—Ç")
    else:
        user_input[col] = st.sidebar.slider(label, float(df[col].min()), float(df[col].max()), float(df[col].mean()))

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
input_df = pd.DataFrame([user_input])
input_scaled = scaler.transform(input_df)

# –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
if st.sidebar.button("–°–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ"):
    prediction = rf_model.predict(input_scaled)
    prediction_proba = rf_model.predict_proba(input_scaled)
    df_prediction_proba = pd.DataFrame(prediction_proba, columns=["–ù–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", "–û—Ç–º–µ–Ω–µ–Ω–æ"])
    df_prediction_proba = df_prediction_proba.round(2)
    
    st.subheader("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")
    
    if prediction[0] == 1:
        st.markdown("<div style='background-color: #ffcccc; padding: 10px; border-radius: 5px;'><strong>‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç–º–µ–Ω—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è!</strong></div>", unsafe_allow_html=True)
    else:
        st.success("‚úÖ –ù–∏–∑–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç–º–µ–Ω—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.")
    
    # –í—ã–≤–æ–¥ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
    st.dataframe(
        df_prediction_proba,
        column_config={
            "–ù–µ –æ—Ç–º–µ–Ω–µ–Ω–æ": st.column_config.ProgressColumn(
                "–ù–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
                format="%.2f",
                width="medium",
                min_value=0,
                max_value=1
            ),
            "–û—Ç–º–µ–Ω–µ–Ω–æ": st.column_config.ProgressColumn(
                "–û—Ç–º–µ–Ω–µ–Ω–æ",
                format="%.2f",
                width="medium",
                min_value=0,
                max_value=1
            ),
        },
        hide_index=True
    )
    
    # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    csv = df_prediction_proba.to_csv(index=False).encode('utf-8')
    st.download_button("üì• –°–∫–∞—á–∞—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ", data=csv, file_name="prediction.csv", mime="text/csv")

# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
st.subheader("üìä –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
feature_importances = pd.DataFrame({
    '–ü—Ä–∏–∑–Ω–∞–∫': X.columns,
    '–ó–Ω–∞—á–∏–º–æ—Å—Ç—å': rf_model.feature_importances_
}).sort_values(by='–ó–Ω–∞—á–∏–º–æ—Å—Ç—å', ascending=False)
fig_importance = px.bar(feature_importances, x='–ü—Ä–∏–∑–Ω–∞–∫', y='–ó–Ω–∞—á–∏–º–æ—Å—Ç—å', title='–í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –º–æ–¥–µ–ª–∏')
st.plotly_chart(fig_importance)
