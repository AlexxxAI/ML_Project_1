import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix


# –ö—ç—à–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö
@st.cache_data
def load_data(url):
    df = pd.read_csv(url)
    df.drop(columns=['Booking_ID'], inplace=True)
    return df

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
url = "https://raw.githubusercontent.com/AlexxxAI/ML_Project_1/refs/heads/master/Hotel_Reservations.csv"
df = load_data(url)

# –ö–æ–¥–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
label_encoders = {}
categorical_features = ['type_of_meal_plan', 'room_type_reserved', 'market_segment_type']
for col in categorical_features:
    le = LabelEncoder()
    df[col] = le.fit_transform(df[col])
    label_encoders[col] = le

# –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏ —Ü–µ–ª–µ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
X = df.drop(columns=['booking_status', 'arrival_year', 'arrival_date'], axis=1)
y = (df['booking_status'] == 'Canceled').astype(int)

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit
st.title("üîÆ –ü—Ä–æ–≥–Ω–æ–∑ –æ—Ç–º–µ–Ω—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
st.sidebar.header("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏")

# –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–∞—Ç–∞—Å–µ—Ç
with st.expander("Data"):
    st.write(df)

# –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –æ–±—É—á–∞—é—â—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫–∏
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

# –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
scaler = StandardScaler()
numerical_columns = X_train.select_dtypes(include=['int64', 'float64']).columns
X_train[numerical_columns] = scaler.fit_transform(X_train[numerical_columns])
X_test[numerical_columns] = scaler.transform(X_test[numerical_columns])

# –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
@st.cache_resource
def train_model(X_train, y_train):
    model = RandomForestClassifier(random_state=42, class_weight='balanced', max_depth=10,
                                   min_samples_leaf=1, n_estimators=300, max_features='sqrt')
    model.fit(X_train, y_train)
    return model
rf_model = train_model(X_train, y_train)
y_pred = rf_model.predict(X_test)

# –ü–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
user_input = {}
user_input['no_of_adults'] = st.sidebar.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∑—Ä–æ—Å–ª—ã—Ö", 1, 5, 2)
user_input['no_of_children'] = st.sidebar.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π", 0, 5, 0)
user_input['no_of_weekend_nights'] = st.sidebar.slider("–ù–æ—á–∏ –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ", 0, 5, 1)
user_input['no_of_week_nights'] = st.sidebar.slider("–ù–æ—á–∏ –≤ –±—É–¥–Ω–∏", 0, 10, 2)
user_input['type_of_meal_plan'] = st.sidebar.selectbox("–¢–∏–ø –ø–∏—Ç–∞–Ω–∏—è", label_encoders['type_of_meal_plan'].classes_)
user_input['required_car_parking_space'] = st.sidebar.checkbox("–ù—É–∂–Ω–∞ –ø–∞—Ä–∫–æ–≤–∫–∞?")
user_input['room_type_reserved'] = st.sidebar.selectbox("–¢–∏–ø –Ω–æ–º–µ—Ä–∞", label_encoders['room_type_reserved'].classes_)
user_input['lead_time'] = st.sidebar.slider("–î–Ω–∏ –¥–æ –∑–∞–µ–∑–¥–∞", 0, 500, 100)
user_input['arrival_month'] = st.sidebar.slider("–ú–µ—Å—è—Ü –∑–∞–µ–∑–¥–∞", 1, 12, 6)
user_input['market_segment_type'] = st.sidebar.selectbox("–¢–∏–ø –∫–ª–∏–µ–Ω—Ç–∞", label_encoders['market_segment_type'].classes_)
user_input['repeated_guest'] = st.sidebar.checkbox("–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç?")
user_input['no_of_previous_cancellations'] = st.sidebar.slider("–ü—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—Ç–º–µ–Ω—ã", 0, 10, 0)
user_input['no_of_previous_bookings_not_canceled'] = st.sidebar.slider("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –±–µ–∑ –æ—Ç–º–µ–Ω", 0, 50, 0)
user_input['avg_price_per_room'] = st.sidebar.slider("–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –Ω–æ–º–µ—Ä–∞", 0, 500, 100)
user_input['no_of_special_requests'] = st.sidebar.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–æ–ø. –∫—Ä–æ–≤–∞—Ç—å)", 0, 5, 0)

# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ DataFrame
input_df = pd.DataFrame([user_input])

with st.expander('Input features'):
    st.write('**Input booking**')
    st.dataframe(input_df)
    st.write('**Combined bookings data** (input row + original data)')
    combined_df = pd.concat([input_df, X], axis=0)
    st.dataframe(combined_df)

# –ö–æ–¥–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
for col in categorical_features:
    input_df[col] = label_encoders[col].transform(input_df[col])

# –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
input_df[numerical_columns] = scaler.transform(input_df[numerical_columns])

with st.expander('Data preparation'):
    st.write('**Encoded X (input booking)**')
    st.dataframe(input_df)
    st.write('**Encoded y**')
    st.write(y)

# –ö–Ω–æ–ø–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
if st.sidebar.button("üîç –°–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ"):
    prediction = rf_model.predict(input_df)[0]
    prediction_proba = rf_model.predict_proba(input_df)[0]
    
    st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:")
    if prediction == 1:
        st.error("‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç–º–µ–Ω—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è!")
    else:
        st.success("‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    
    st.progress(int(prediction_proba[1] * 100))
    st.write(f"**–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç–º–µ–Ω—ã:** {prediction_proba[1]:.2f}")

    # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–≤
    df_prediction_proba = pd.DataFrame({
        'Canceled': [prediction_proba[1]],
        'Not Canceled': [prediction_proba[0]]
    })

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞–º–∏
    st.subheader('üìä –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è')
    st.dataframe(
        df_prediction_proba,
        column_config={
            'Canceled': st.column_config.ProgressColumn(
                'Canceled',
                format='%.1f',
                width='medium',
                min_value=0,
                max_value=1
            ),
            'Not Canceled': st.column_config.ProgressColumn(
                'Not Canceled',
                format='%.1f',
                width='medium',
                min_value=0,
                max_value=1
            ),
        },
        hide_index=True
    )

    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    st.subheader("üìà Data Visualization")

    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    feature_importances = pd.Series(rf_model.feature_importances_, index=X.columns).sort_values(ascending=False)
    fig_1 = px.bar(feature_importances, title="Feature Importance", labels={'value': '–í–∞–∂–Ω–æ—Å—Ç—å', 'index': '–ü—Ä–∏–∑–Ω–∞–∫–∏'})
    st.plotly_chart(fig_1)

    # –ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫
    cm = confusion_matrix(y_test, y_pred)
    labels = ["–ù–µ –æ—Ç–º–µ–Ω–µ–Ω–∞", "–û—Ç–º–µ–Ω–µ–Ω–∞"]
    fig_cm = px.imshow(cm, text_auto=True, color_continuous_scale='Blues',
                        labels={'x': '–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–æ', 'y': '–ò—Å—Ç–∏–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ'})
    fig_cm.update_xaxes(tickvals=[0, 1], ticktext=labels)
    fig_cm.update_yaxes(tickvals=[0, 1], ticktext=labels)
    fig_cm.update_layout(title_text="–ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫")
    st.plotly_chart(fig_cm)

    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –∑–∞–µ–∑–¥–∞
    df['booking_status'] = df['booking_status'].apply(lambda x: 'Canceled' if x == 'Canceled' else 'Not Canceled')
    fig_3 = px.histogram(df, x='lead_time', color='booking_status', barmode='group',
                         title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –∑–∞–µ–∑–¥–∞',
                         color_discrete_sequence=['#FF0000', '#0000FF'])
    fig_3.update_layout(
        width=1000,
        height=800
    )
    st.plotly_chart(fig_3)

    # –í–ª–∏—è–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ—Ç–º–µ–Ω—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (no_of_special_requests)
    fig_4 = px.bar(df.groupby(['no_of_special_requests', 'booking_status']).size().reset_index(name='count'),
                   x='no_of_special_requests', y='count', color='booking_status', barmode='group',
                   title='–í–ª–∏—è–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ—Ç–º–µ–Ω—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è')
    st.plotly_chart(fig_4)

    # –í–ª–∏—è–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã –Ω–∞ –Ω–æ–º–µ—Ä –Ω–∞ –æ—Ç–º–µ–Ω—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (avg_price_per_room)
    fig_5 = px.scatter(df, x='avg_price_per_room', y='lead_time', color='booking_status',
                       title='–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç–º–µ–Ω—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã –Ω–æ–º–µ—Ä–∞')
    st.plotly_chart(fig_5)

    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –ø–æ —Ç–∏–ø—É –∫–ª–∏–µ–Ω—Ç–∞ (market_segment_type)
    df['market_segment_type'] = df['market_segment_type'].astype(str)
    fig_6 = px.bar(df.groupby(['market_segment_type', 'booking_status']).size().reset_index(name='count'),
                   x='market_segment_type', y='count', color='booking_status', barmode='group',
                   title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –ø–æ —Ç–∏–ø—É –∫–ª–∏–µ–Ω—Ç–∞',
                   category_orders={"market_segment_type": ['Offline', 'Online', 'Corporate', 'Aviation', 'Complementary']})
    st.plotly_chart(fig_6)

    # –ì—Ä–∞—Ñ–∏–∫ 5: –í–ª–∏—è–Ω–∏–µ –º–µ—Å—è—Ü–∞ –∑–∞–µ–∑–¥–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (arrival_month)
    fig_7 = px.bar(df.groupby(['arrival_month', 'booking_status']).size().reset_index(name='count'),
                   x='arrival_month', y='count', color='booking_status', barmode='group',
                   title='–í–ª–∏—è–Ω–∏–µ –º–µ—Å—è—Ü–∞ –∑–∞–µ–∑–¥–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è')
    st.plotly_chart(fig_7)
