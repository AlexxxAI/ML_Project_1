import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.ensemble import RandomForestClassifier

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="–ü—Ä–æ–≥–Ω–æ–∑ –æ—Ç–º–µ–Ω—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", layout="centered")

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("üè® –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–µ–ª—è")
st.write("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∏ –º–æ–¥–µ–ª—å –ø—Ä–µ–¥—Å–∫–∞–∂–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç–º–µ–Ω—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
url = "https://raw.githubusercontent.com/AlexxxAI/ML_Project_1/refs/heads/master/Hotel_Reservations.csv"
df = pd.read_csv(url)

df = df.drop(columns=['Booking_ID'])

# –ö–æ–¥–∏—Ä—É–µ–º —Ü–µ–ª–µ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
if 'booking_status' in df.columns:
    df['booking_status'] = df['booking_status'].map({'Canceled': 1, 'Not_Canceled': 0})

# –ö–æ–¥–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
label_encoder = LabelEncoder()
categorical_features = ['type_of_meal_plan', 'room_type_reserved', 'market_segment_type']
for col in categorical_features:
    df[col] = label_encoder.fit_transform(df[col])

# –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏ —Ü–µ–ª–µ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
X = df.drop('booking_status', axis=1)
y = df['booking_status']

# –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ–±—É—á–∞—é—â—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫–∏
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

# –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
scaler = StandardScaler()
numerical_columns = X_train.select_dtypes(include=['int64', 'float64']).columns
X_train[numerical_columns] = scaler.fit_transform(X_train[numerical_columns])
X_test[numerical_columns] = scaler.transform(X_test[numerical_columns])

# –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ Random Forest
rf_model = RandomForestClassifier(random_state=42, class_weight='balanced', max_depth=10,
                                  min_samples_leaf=1, n_estimators=300, max_features='sqrt')
rf_model.fit(X_train, y_train)

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ —Å —Ä—É—Å—Å–∫–∏–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
st.sidebar.header("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:")
user_input = {}

feature_map = {
    "no_of_adults": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∑—Ä–æ—Å–ª—ã—Ö",
    "no_of_children": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π",
    "no_of_weekend_nights": "–ù–æ—á–µ–π –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ",
    "no_of_week_nights": "–ù–æ—á–µ–π –≤ –±—É–¥–Ω–∏",
    "required_car_parking_space": "–ù—É–∂–Ω–∞ –ø–∞—Ä–∫–æ–≤–∫–∞",
    "lead_time": "–î–Ω–µ–π –¥–æ –∑–∞–µ–∑–¥–∞",
    "arrival_month": "–ú–µ—Å—è—Ü –∑–∞–µ–∑–¥–∞",
    "arrival_date": "–î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞",
    "repeated_guest": "–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≥–æ—Å—Ç—å",
    "no_of_previous_cancellations": "–ß–∏—Å–ª–æ –æ—Ç–º–µ–Ω",
    "no_of_previous_bookings_not_canceled": "–ß–∏—Å–ª–æ —É—Å–ø–µ—à–Ω—ã—Ö –±—Ä–æ–Ω–µ–π",
    "avg_price_per_room": "–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –Ω–æ–º–µ—Ä–∞",
    "no_of_special_requests": "–ß–∏—Å–ª–æ –ø–æ–∂–µ–ª–∞–Ω–∏–π"
}

for col in X.columns:
    if col in ["no_of_adults", "no_of_children", "no_of_weekend_nights", "no_of_week_nights", "no_of_special_requests"]:
        user_input[col] = st.sidebar.number_input(feature_map[col], min_value=0, max_value=int(df[col].max()), value=int(df[col].mean()), step=1)
    elif col in ["required_car_parking_space", "repeated_guest"]:
        user_input[col] = st.sidebar.radio(feature_map[col], [0, 1], format_func=lambda x: "–î–∞" if x == 1 else "–ù–µ—Ç")
    elif col in ["arrival_month", "arrival_date"]:
        user_input[col] = st.sidebar.selectbox(feature_map[col], sorted(df[col].unique()))
    else:
        user_input[col] = st.sidebar.number_input(feature_map[col], float(df[col].min()), float(df[col].max()), float(df[col].mean()))

# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–≤–æ–¥ –≤ DataFrame
input_df = pd.DataFrame([user_input])
input_scaled = scaler.transform(input_df)

# –ö–Ω–æ–ø–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
if st.sidebar.button("üîç –°–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ"):
    prediction = rf_model.predict(input_scaled)
    prediction_proba = rf_model.predict_proba(input_scaled)
    result = "‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ" if prediction[0] == 0 else "‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç–º–µ–Ω—ã!"
    st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:")
    st.markdown(f"**{result}**")

    st.subheader("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:")
    st.write(f"- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: {prediction_proba[0][0]:.2f}")
    st.write(f"- –û—Ç–º–µ–Ω–∞: {prediction_proba[0][1]:.2f}")

# –ì—Ä–∞—Ñ–∏–∫ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
st.subheader("üìä –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
importances = pd.Series(rf_model.feature_importances_, index=X.columns).sort_values(ascending=False)
fig, ax = plt.subplots()
importances.plot(kind='bar', ax=ax)
ax.set_title("–í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
ax.set_ylabel("–ó–Ω–∞—á–∏–º–æ—Å—Ç—å")
st.pyplot(fig)
